{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sinan\\\\Desktop\\\\Project\\\\calender\\\\calendar-app\\\\src\\\\components\\\\Calendar.js\";\nimport React from 'react';\nimport dayjs from 'dayjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Calendar = ({\n  currentMonth,\n  events\n}) => {\n  const today = dayjs();\n  const firstDayOfMonth = dayjs(currentMonth).startOf('month');\n  // const lastDayOfMonth = dayjs(currentMonth).endOf('month'); // This variable is not used\n  const daysInMonth = dayjs(currentMonth).daysInMonth();\n  const startDayOfWeek = firstDayOfMonth.day(); // 0 (Sunday) to 6 (Saturday)\n\n  const calendarDays = [];\n\n  // Add empty cells for days before the first day of the month\n  for (let i = 0; i < startDayOfWeek; i++) {\n    calendarDays.push(/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"border border-gray-200 p-2 h-24 bg-gray-50\"\n    }, `empty-start-${i}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 23\n    }, this));\n  }\n\n  // Add cells for each day of the month\n  for (let day = 1; day <= daysInMonth; day++) {\n    const date = dayjs(currentMonth).date(day);\n    const isToday = date.isSame(today, 'day');\n    const dayEvents = events.filter(event => dayjs(event.date).isSame(date, 'day'));\n\n    // Check for event overlap\n    const hasMultipleEvents = dayEvents.length > 1;\n    calendarDays.push(/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `border border-gray-200 p-2 h-24 ${isToday ? 'bg-blue-50 border-blue-300' : 'hover:bg-gray-50'} relative transition-colors`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `text-sm mb-1 ${isToday ? 'font-bold text-blue-600 bg-blue-100 w-6 h-6 rounded-full flex items-center justify-center' : ''}`,\n        children: day\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-1 space-y-1 overflow-y-auto max-h-16\",\n        children: dayEvents.map((event, idx) => {\n          // Different color classes for events to show variety\n          const colorClasses = ['bg-green-200 border-l-4 border-green-600 text-green-900', 'bg-blue-200 border-l-4 border-blue-600 text-blue-900', 'bg-purple-200 border-l-4 border-purple-600 text-purple-900', 'bg-amber-200 border-l-4 border-amber-600 text-amber-900'];\n\n          // Assign a color based on idx or a pattern\n          const colorClass = colorClasses[idx % colorClasses.length];\n\n          // Add warning style for overlapping events\n          const overlapClass = hasMultipleEvents ? 'border-dashed' : '';\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `${colorClass} ${overlapClass} p-1 rounded text-xs truncate`,\n            title: `${event.title} - ${event.time} (${event.duration} min)`,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"font-medium\",\n              children: event.time\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 17\n            }, this), \" - \", event.title]\n          }, event.title + event.time, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)]\n    }, date.toString(), true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this));\n  }\n\n  // Calculate remaining empty cells to complete the grid\n  const totalCells = 42; // 6x7 grid\n  const remainingCells = totalCells - calendarDays.length;\n  for (let i = 0; i < remainingCells; i++) {\n    calendarDays.push(/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"border border-gray-200 p-2 h-24 bg-gray-50\"\n    }, `empty-end-${i}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 23\n    }, this));\n  }\n  const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-7 rounded-md overflow-hidden\",\n      children: [weekdays.map(day => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"border border-gray-200 p-2 text-center font-semibold bg-gray-100 text-gray-700\",\n        children: day\n      }, day, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)), calendarDays]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4 text-xs text-gray-500 flex items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-3 h-3 border border-dashed border-gray-400 mr-1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Dashed border indicates overlapping events\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_c = Calendar;\nexport default Calendar;\nvar _c;\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["React","dayjs","jsxDEV","_jsxDEV","Calendar","currentMonth","events","today","firstDayOfMonth","startOf","daysInMonth","startDayOfWeek","day","calendarDays","i","push","className","fileName","_jsxFileName","lineNumber","columnNumber","date","isToday","isSame","dayEvents","filter","event","hasMultipleEvents","length","children","map","idx","colorClasses","colorClass","overlapClass","title","time","duration","toString","totalCells","remainingCells","weekdays","_c","$RefreshReg$"],"sources":["C:/Users/Sinan/Desktop/Project/calender/calendar-app/src/components/Calendar.js"],"sourcesContent":["import React from 'react';\r\nimport dayjs from 'dayjs';\r\n\r\nconst Calendar = ({ currentMonth, events }) => {\r\n  const today = dayjs();\r\n  const firstDayOfMonth = dayjs(currentMonth).startOf('month');\r\n  // const lastDayOfMonth = dayjs(currentMonth).endOf('month'); // This variable is not used\r\n  const daysInMonth = dayjs(currentMonth).daysInMonth();\r\n  const startDayOfWeek = firstDayOfMonth.day(); // 0 (Sunday) to 6 (Saturday)\r\n\r\n  const calendarDays = [];\r\n\r\n  // Add empty cells for days before the first day of the month\r\n  for (let i = 0; i < startDayOfWeek; i++) {\r\n    calendarDays.push(<div key={`empty-start-${i}`} className=\"border border-gray-200 p-2 h-24 bg-gray-50\"></div>);\r\n  }\r\n\r\n  // Add cells for each day of the month\r\n  for (let day = 1; day <= daysInMonth; day++) {\r\n    const date = dayjs(currentMonth).date(day);\r\n    const isToday = date.isSame(today, 'day');\r\n    const dayEvents = events.filter(event => dayjs(event.date).isSame(date, 'day'));\r\n    \r\n    // Check for event overlap\r\n    const hasMultipleEvents = dayEvents.length > 1;\r\n\r\n    calendarDays.push(\r\n      <div \r\n        key={date.toString()} \r\n        className={`border border-gray-200 p-2 h-24 ${isToday ? 'bg-blue-50 border-blue-300' : 'hover:bg-gray-50'} relative transition-colors`}\r\n      >\r\n        <div className={`text-sm mb-1 ${isToday ? 'font-bold text-blue-600 bg-blue-100 w-6 h-6 rounded-full flex items-center justify-center' : ''}`}>\r\n          {day}\r\n        </div>\r\n        <div className=\"mt-1 space-y-1 overflow-y-auto max-h-16\">\r\n          {dayEvents.map((event, idx) => {\r\n            // Different color classes for events to show variety\r\n            const colorClasses = [\r\n              'bg-green-200 border-l-4 border-green-600 text-green-900',\r\n              'bg-blue-200 border-l-4 border-blue-600 text-blue-900',\r\n              'bg-purple-200 border-l-4 border-purple-600 text-purple-900',\r\n              'bg-amber-200 border-l-4 border-amber-600 text-amber-900'\r\n            ];\r\n            \r\n            // Assign a color based on idx or a pattern\r\n            const colorClass = colorClasses[idx % colorClasses.length];\r\n            \r\n            // Add warning style for overlapping events\r\n            const overlapClass = hasMultipleEvents ? 'border-dashed' : '';\r\n            \r\n            return (\r\n              <div \r\n                key={event.title + event.time} \r\n                className={`${colorClass} ${overlapClass} p-1 rounded text-xs truncate`}\r\n                title={`${event.title} - ${event.time} (${event.duration} min)`}\r\n              >\r\n                <span className=\"font-medium\">{event.time}</span> - {event.title}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Calculate remaining empty cells to complete the grid\r\n  const totalCells = 42; // 6x7 grid\r\n  const remainingCells = totalCells - calendarDays.length;\r\n\r\n  for (let i = 0; i < remainingCells; i++) {\r\n    calendarDays.push(<div key={`empty-end-${i}`} className=\"border border-gray-200 p-2 h-24 bg-gray-50\"></div>);\r\n  }\r\n\r\n  const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <div className=\"grid grid-cols-7 rounded-md overflow-hidden\">\r\n        {weekdays.map(day => (\r\n          <div key={day} className=\"border border-gray-200 p-2 text-center font-semibold bg-gray-100 text-gray-700\">\r\n            {day}\r\n          </div>\r\n        ))}\r\n        {calendarDays}\r\n      </div>\r\n      \r\n      {/* Legend for multiple events */}\r\n      <div className=\"mt-4 text-xs text-gray-500 flex items-center\">\r\n        <div className=\"w-3 h-3 border border-dashed border-gray-400 mr-1\"></div>\r\n        <span>Dashed border indicates overlapping events</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calendar; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}